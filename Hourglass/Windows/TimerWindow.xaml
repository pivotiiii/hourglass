<Window x:Class="Hourglass.Windows.TimerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Hourglass.Windows"
        SnapsToDevicePixels="True"
        RenderOptions.ClearTypeHint="Enabled"
        Width="{x:Static local:InterfaceScaler.BaseWindowWidth}"
        Height="{x:Static local:InterfaceScaler.BaseWindowHeight}"
        SourceInitialized="OnSourceInitialized"
        Loaded="WindowLoaded"
        SizeChanged="WindowSizeChanged"
        StateChanged="WindowStateChanged"
        Closing="WindowClosing"
        Closed="WindowClosed"
        MouseDown="WindowMouseDown"
        MouseUp="WindowMouseUp"
        MouseDoubleClick="WindowMouseDoubleClick"
        ToolTip="{Binding TimeToolTip, Mode=OneWay, RelativeSource={RelativeSource Self}}"
        ToolTipService.IsEnabled="{Binding ShowTimeToolTip, Mode=OneWay, RelativeSource={RelativeSource Self}}">
    <Window.Style>
        <Style TargetType="{x:Type Window}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Options.WindowTitleMode, RelativeSource={RelativeSource Self}}" Value="None">
                    <Setter Property="WindowStyle" Value="None"/>
                    <Setter Property="WindowChrome.WindowChrome">
                        <Setter.Value>
                            <WindowChrome CaptionHeight="0" UseAeroCaptionButtons="False"/>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFullScreen, RelativeSource={RelativeSource Self}}" Value="True">
                    <Setter Property="WindowStyle" Value="None"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <Window.CommandBindings>
        <CommandBinding Command="local:TimerWindow.NewTimerCommand" Executed="NewTimerCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.StartCommand" Executed="StartCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.PauseCommand" Executed="PauseCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.ResumeCommand" Executed="ResumeCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.PauseResumeCommand" Executed="PauseResumeCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.StopCommand" Executed="StopCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.RestartCommand" Executed="RestartCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.CloseCommand" Executed="CloseCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.CancelCommand" Executed="CancelCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.UpdateCommand" Executed="UpdateCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.EscapeCommand" Executed="EscapeCommandExecuted"/>
        <CommandBinding Command="local:TimerWindow.FullScreenCommand" Executed="FullScreenCommandExecuted"/>
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Command="local:TimerWindow.NewTimerCommand" Gesture="{x:Static local:TimerWindow.NewTimerKeyGesture}"/>
        <KeyBinding Command="local:TimerWindow.PauseResumeCommand" Gesture="{x:Static local:TimerWindow.ResumeKeyGesture}"/>
        <KeyBinding Command="local:TimerWindow.PauseResumeCommand" Gesture="{x:Static local:TimerWindow.PauseKeyGesture}"/>
        <KeyBinding Command="local:TimerWindow.StartCommand" Gesture="{x:Static local:TimerWindow.StartKeyGesture}"/>
        <KeyBinding Command="local:TimerWindow.StopCommand" Gesture="{x:Static local:TimerWindow.StopKeyGesture}"/>
        <KeyBinding Command="local:TimerWindow.RestartCommand" Gesture="{x:Static local:TimerWindow.RestartKeyGesture}"/>
        <KeyBinding Command="local:TimerWindow.EscapeCommand" Gesture="Esc"/>
        <KeyBinding Command="local:TimerWindow.FullScreenCommand" Gesture="Alt+Enter"/>
        <KeyBinding Command="local:TimerWindow.FullScreenCommand" Gesture="{x:Static local:TimerWindow.FullScreenKeyGesture}"/>
    </Window.InputBindings>
    <Window.Resources>
        <local:RegexMatchConverter x:Key="RegexMatchConverter"/>
        <Style TargetType="{x:Type ProgressBar}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="Root">
                            <Border Name="PART_Track" Background="{TemplateBinding Background}"/>
                            <Border Name="PART_Indicator" Background="{TemplateBinding Foreground}" HorizontalAlignment="Left"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <!-- http://stackoverflow.com/a/6849237/7532 -->
                                <Setter TargetName="Root" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="270"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Root" Property="Width"  Value="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter TargetName="Root" Property="Height" Value="{Binding Width,  RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TitleTextBoxStyle" TargetType="TextBox">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=TitleTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=TimerTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=PauseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=ResumeButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StopButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=RestartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CloseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CancelButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=UpdateButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=InnerGrid, Path=IsMouseOver}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=ContextMenu.IsOpen}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=Mode}" Value="Status"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value=""/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonPanelStyle" TargetType="StackPanel">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=TitleTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=TimerTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=PauseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=ResumeButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StopButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=RestartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CloseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CancelButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=UpdateButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=InnerGrid, Path=IsMouseOver}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=ContextMenu.IsOpen}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=Timer.State, Converter={StaticResource RegexMatchConverter}, ConverterParameter=^(Running|Expired)$}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Margin" Value="7 0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <TextBlock>
                            <ContentPresenter RecognizesAccessKey="True"/>
                        </TextBlock>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TimeExpiredLabelStyle" TargetType="{x:Type Label}">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Margin" Value="7 0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <TextBlock>
                            <ContentPresenter/>
                        </TextBlock>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=TitleTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=TimerTextBox, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=PauseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=ResumeButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=StopButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=RestartButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CloseButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=CancelButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=UpdateButton, Path=IsFocused}" Value="False"/>
                        <Condition Binding="{Binding ElementName=InnerGrid, Path=IsMouseOver}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=ContextMenu.IsOpen}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=Timer.State}" Value="Expired"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <ExponentialEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo/>
    </Window.TaskbarItemInfo>
    <Grid>
        <ProgressBar x:Name="ProgressBar"/>
        <Border x:Name="OuterNotificationBorder" IsHitTestVisible="False" Opacity="0"/>
        <Grid x:Name="InnerGrid" Margin="10">
            <StackPanel x:Name="ControlsPanel" Margin="20 0" VerticalAlignment="Center">
                <AdornerDecorator>
                    <local:SizeToFitTextBox x:Name="TitleTextBox"
                                        Background="{x:Null}"
                                        BorderBrush="{x:Null}"
                                        FontFamily="Segoe UI"
                                        KeyDown="TitleTextBoxKeyDown"
                                        MaxFontSize="24"
                                        MinFontSize="0.5"
                                        PreviewMouseDown="TitleTextBoxPreviewMouseDown"
                                        PreviewGotKeyboardFocus="TitleTextBoxPreviewGotKeyboardFocus"
                                        Style="{StaticResource TitleTextBoxStyle}"
                                        TextAlignment="Center"
                                        TextChanged="TitleTextBoxTextChanged"/>
                </AdornerDecorator>
                <local:SizeToFitTextBox x:Name="TimerTextBox"
                                        Background="{x:Null}"
                                        BorderBrush="{x:Null}"
                                        FontFamily="Segoe UI Light, Segoe UI"
                                        Margin="0 1 0 4"
                                        MaxFontSize="36"
                                        MinFontSize="0.5"
                                        PreviewMouseDown="TimerTextBoxPreviewMouseDown"
                                        PreviewGotKeyboardFocus="TimerTextBoxPreviewGotKeyboardFocus"
                                        TextAlignment="Center"/>
                <Grid>
                    <Label x:Name="TimeExpiredLabel"
                           Content="{Binding RelativeSource={RelativeSource AncestorType=local:TimerWindow}, Path=Timer.TimeExpiredAsString}"
                           HorizontalAlignment="Center"
                           Opacity="0.0"
                           Style="{StaticResource TimeExpiredLabelStyle}"/>
                    <StackPanel x:Name="ButtonPanel" HorizontalAlignment="Center" Orientation="Horizontal" Style="{StaticResource ButtonPanelStyle}">
                        <Button x:Name="StartButton" Command="local:TimerWindow.StartCommand" IsDefault="True" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                        <Button x:Name="PauseButton" Command="local:TimerWindow.PauseCommand" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                        <Button x:Name="ResumeButton" Command="local:TimerWindow.ResumeCommand" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                        <Button x:Name="StopButton" Command="local:TimerWindow.StopCommand" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                        <Button x:Name="RestartButton" Command="local:TimerWindow.RestartCommand" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                        <Button x:Name="CloseButton" Command="local:TimerWindow.CloseCommand" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                        <Button x:Name="CancelButton" Command="local:TimerWindow.CancelCommand" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                        <Button x:Name="UpdateButton" Command="local:TimerWindow.UpdateCommand" MouseEnter="ButtonMouseEnter" MouseLeave="ButtonMouseLeave"/>
                    </StackPanel>
                </Grid>
            </StackPanel>
        </Grid>
        <Border x:Name="InnerNotificationBorder" BorderThickness="1" IsHitTestVisible="False" Margin="15" Opacity="0"/>
    </Grid>
</Window>
